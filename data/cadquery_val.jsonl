{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=60 mm, height=165 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(60,165,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=231 mm, height=58 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(231,58,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=97 mm, height=62 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(97,62,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=233 mm, height=52 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(233,52,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=91 mm, height=50 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(91,50,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=101 mm, height=77 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(101,77,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=211 mm, height=74 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(211,74,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=159 mm, height=110 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(159,110,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=82 mm, height=74 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(82,74,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=119 mm, height=72 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(119,72,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=119 mm, height=141 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(119,141,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=223 mm, height=95 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(223,95,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=191 mm, height=107 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(191,107,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=218 mm, height=122 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(218,122,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=243 mm, height=55 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(243,55,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=176 mm, height=154 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(176,154,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=57 mm, height=174 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(57,174,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=43 mm, height=152 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(43,152,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=67 mm, height=155 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(67,155,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=202 mm, height=162 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(202,162,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=151 mm, height=90 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(151,90,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=206 mm, height=114 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(206,114,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=159 mm, height=156 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(159,156,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=122 mm, height=107 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(122,107,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=111 mm, height=160 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(111,160,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=232 mm, height=163 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(232,163,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=126 mm, height=52 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(126,52,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=123 mm, height=91 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(123,91,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=94 mm, height=135 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(94,135,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=127 mm, height=116 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(127,116,11)\n"}]}
