{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=203 mm, height=73 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(203,73,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=229 mm, height=115 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(229,115,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=97 mm, height=80 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(97,80,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=213 mm, height=67 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(213,67,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=48 mm, height=52 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(48,52,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=95 mm, height=104 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(95,104,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=194 mm, height=51 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(194,51,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=223 mm, height=152 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(223,152,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=154 mm, height=116 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(154,116,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=234 mm, height=85 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(234,85,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=127 mm, height=116 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(127,116,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=95 mm, height=131 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(95,131,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=63 mm, height=142 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(63,142,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=131 mm, height=133 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(131,133,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=246 mm, height=56 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(246,56,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=177 mm, height=76 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(177,76,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=60 mm, height=120 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(60,120,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=187 mm, height=94 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(187,94,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=51 mm, height=103 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(51,103,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=60 mm, height=104 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(60,104,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=137 mm, height=116 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(137,116,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=202 mm, height=138 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(202,138,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=134 mm, height=135 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(134,135,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=211 mm, height=113 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(211,113,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=195 mm, height=88 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(195,88,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=81 mm, height=163 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(81,163,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=109 mm, height=101 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(109,101,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=236 mm, height=59 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(236,59,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=48 mm, height=125 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(48,125,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=108 mm, height=61 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(108,61,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=185 mm, height=125 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(185,125,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=207 mm, height=172 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(207,172,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=204 mm, height=162 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(204,162,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=107 mm, height=80 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(107,80,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=230 mm, height=112 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(230,112,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=189 mm, height=147 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(189,147,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=96 mm, height=80 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(96,80,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=166 mm, height=68 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(166,68,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=68 mm, height=84 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(68,84,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=242 mm, height=153 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(242,153,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=138 mm, height=142 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(138,142,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=175 mm, height=109 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(175,109,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=214 mm, height=74 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(214,74,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=236 mm, height=132 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(236,132,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=115 mm, height=156 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(115,156,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=156 mm, height=45 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(156,45,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=168 mm, height=90 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(168,90,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=67 mm, height=121 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(67,121,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=195 mm, height=95 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(195,95,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=135 mm, height=86 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(135,86,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=40 mm, height=127 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(40,127,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=44 mm, height=73 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(44,73,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=246 mm, height=123 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(246,123,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=54 mm, height=106 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(54,106,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=61 mm, height=169 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(61,169,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=234 mm, height=77 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(234,77,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=208 mm, height=166 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(208,166,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=107 mm, height=153 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(107,153,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=178 mm, height=96 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(178,96,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=142 mm, height=140 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(142,140,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=172 mm, height=160 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(172,160,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=103 mm, height=102 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(103,102,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=126 mm, height=50 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(126,50,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=190 mm, height=101 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(190,101,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=58 mm, height=60 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(58,60,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=57 mm, height=53 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(57,53,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=58 mm, height=176 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(58,176,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=111 mm, height=169 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(111,169,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=178 mm, height=78 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(178,78,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=102 mm, height=166 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(102,166,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=88 mm, height=69 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(88,69,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=208 mm, height=155 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(208,155,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=148 mm, height=150 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(148,150,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=226 mm, height=58 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(226,58,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=55 mm, height=148 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(55,148,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=244 mm, height=72 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(244,72,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=89 mm, height=93 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(89,93,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=75 mm, height=153 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(75,153,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=111 mm, height=163 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(111,163,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=59 mm, height=158 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(59,158,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=52 mm, height=48 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(52,48,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=232 mm, height=105 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(232,105,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=144 mm, height=169 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(144,169,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=94 mm, height=147 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(94,147,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=82 mm, height=142 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(82,142,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=139 mm, height=112 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(139,112,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=113 mm, height=153 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(113,153,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=79 mm, height=93 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(79,93,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=95 mm, height=59 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(95,59,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=231 mm, height=125 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(231,125,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=52 mm, height=167 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(52,167,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=175 mm, height=85 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(175,85,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=170 mm, height=65 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(170,65,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=57 mm, height=62 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(57,62,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=143 mm, height=75 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(143,75,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=188 mm, height=55 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(188,55,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=147 mm, height=178 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(147,178,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=106 mm, height=97 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(106,97,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=101 mm, height=112 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(101,112,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=73 mm, height=121 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(73,121,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=120 mm, height=63 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(120,63,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=157 mm, height=70 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(157,70,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=177 mm, height=99 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(177,99,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=107 mm, height=78 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(107,78,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=57 mm, height=107 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(57,107,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=112 mm, height=85 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(112,85,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=179 mm, height=122 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(179,122,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=42 mm, height=121 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(42,121,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=74 mm, height=112 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(74,112,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=67 mm, height=84 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(67,84,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=112 mm, height=98 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(112,98,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=92 mm, height=112 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(92,112,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=165 mm, height=109 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(165,109,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=63 mm, height=153 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(63,153,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=51 mm, height=45 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(51,45,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=237 mm, height=78 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(237,78,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=81 mm, height=158 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(81,158,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=183 mm, height=47 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(183,47,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=59 mm, height=83 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(59,83,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=134 mm, height=82 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(134,82,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=72 mm, height=55 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(72,55,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=133 mm, height=55 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(133,55,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=93 mm, height=108 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(93,108,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=130 mm, height=149 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(130,149,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=100 mm, height=86 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(100,86,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=145 mm, height=51 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(145,51,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=228 mm, height=130 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(228,130,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=245 mm, height=108 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(245,108,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=80 mm, height=72 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(80,72,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=49 mm, height=165 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(49,165,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=91 mm, height=162 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(91,162,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=118 mm, height=103 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(118,103,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=46 mm, height=94 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(46,94,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=124 mm, height=116 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(124,116,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=237 mm, height=116 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(237,116,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=204 mm, height=175 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(204,175,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=213 mm, height=129 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(213,129,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=69 mm, height=111 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(69,111,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=188 mm, height=112 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(188,112,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=67 mm, height=156 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(67,156,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=226 mm, height=125 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(226,125,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=195 mm, height=175 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(195,175,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=138 mm, height=93 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(138,93,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=51 mm, height=156 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(51,156,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=173 mm, height=95 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(173,95,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=150 mm, height=62 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(150,62,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=199 mm, height=125 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(199,125,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=224 mm, height=121 mm, thickness=19 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(224,121,19)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=119 mm, height=149 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(119,149,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=143 mm, height=120 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(143,120,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=89 mm, height=152 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(89,152,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=213 mm, height=89 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(213,89,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=143 mm, height=45 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(143,45,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=113 mm, height=98 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(113,98,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=241 mm, height=127 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(241,127,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=153 mm, height=158 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(153,158,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=170 mm, height=166 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(170,166,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=208 mm, height=66 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(208,66,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=171 mm, height=130 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(171,130,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=249 mm, height=105 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(249,105,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=97 mm, height=95 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(97,95,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=46 mm, height=56 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(46,56,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=161 mm, height=63 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(161,63,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=146 mm, height=94 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(146,94,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=166 mm, height=147 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(166,147,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=77 mm, height=46 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(77,46,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=239 mm, height=153 mm, thickness=10 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(239,153,10)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=85 mm, height=177 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(85,177,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=52 mm, height=108 mm, thickness=6 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(52,108,6)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=156 mm, height=79 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(156,79,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=210 mm, height=126 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(210,126,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=196 mm, height=174 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(196,174,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=180 mm, height=159 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(180,159,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=230 mm, height=166 mm, thickness=17 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(230,166,17)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=106 mm, height=108 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(106,108,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=236 mm, height=178 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(236,178,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=200 mm, height=106 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(200,106,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=152 mm, height=64 mm, thickness=12 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(152,64,12)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=100 mm, height=114 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(100,114,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=121 mm, height=65 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(121,65,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=78 mm, height=104 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(78,104,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=217 mm, height=84 mm, thickness=9 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(217,84,9)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=56 mm, height=151 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(56,151,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=124 mm, height=164 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(124,164,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=55 mm, height=97 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(55,97,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=139 mm, height=50 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(139,50,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=162 mm, height=46 mm, thickness=14 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(162,46,14)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=116 mm, height=144 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(116,144,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=177 mm, height=101 mm, thickness=18 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(177,101,18)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=96 mm, height=114 mm, thickness=16 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(96,114,16)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=164 mm, height=52 mm, thickness=15 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(164,52,15)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=126 mm, height=148 mm, thickness=8 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(126,148,8)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=159 mm, height=77 mm, thickness=3 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(159,77,3)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=140 mm, height=51 mm, thickness=5 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(140,51,5)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=204 mm, height=154 mm, thickness=7 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(204,154,7)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=158 mm, height=91 mm, thickness=4 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(158,91,4)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=106 mm, height=142 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(106,142,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=94 mm, height=161 mm, thickness=13 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(94,161,13)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=126 mm, height=142 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(126,142,11)\n"}]}
{"messages": [{"role": "system", "content": "You output ONLY executable CadQuery Python. Use `import cadquery as cq`. Final object in variable `result`."}, {"role": "user", "content": "Plate: width=232 mm, height=152 mm, thickness=11 mm. Centered thru-hole dia=min(w,h)*0.2. Write make_part(w,h,t) and call it. Output ONLY code."}, {"role": "assistant", "content": "import cadquery as cq\n\ndef make_part(w,h,t):\n    assert w>0 and h>0 and t>0\n    hole = min(w,h)*0.2\n    wp = (cq.Workplane('XY').rect(w, h).extrude(t)\n          .faces('>Z').workplane(centerOption='CenterOfMass').hole(hole))\n    return wp\n\nresult = make_part(232,152,11)\n"}]}
